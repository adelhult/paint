//// This module has been generated by the 'reference' tool.

pub type Path = List(String)

pub type Reference {
  Reference(path: Path, module_doc: String, content: String)
}

pub const references: List(Reference) = [
  Reference(path: [".", "src", "examples", "readme.gleam"], module_doc: " A visualisation of the code found in the README.md file,\n just to make sure that the examples are kept up to date with any\n changes to the API.\n", content: "import paint as p\n\npub fn readme_example() -> p.Picture {\n  p.combine([\n    p.circle(30.0),\n    p.circle(20.0) |> p.fill(p.colour_rgb(0, 200, 200)),\n    p.rectangle(50.0, 30.0) |> p.rotate(p.angle_deg(30.0)),\n    p.text(\"Hello world\", 10) |> p.translate_y(-35.0),\n  ])\n}"),
  Reference(path: [".", "src", "examples", "concat.gleam"], module_doc: "", content: "import paint as p\n\npub fn concat_example() -> p.Picture {\n  let circle = p.circle(30.0)\n  circle\n  |> p.concat(circle |> p.translate_x(30.0))\n}"),
  Reference(path: [".", "src", "examples", "community_colour.gleam"], module_doc: " paint uses gleam_community_colour which means that you are free\n to import and use any of the many functions and predefined colours from that package.\n However, paint also provides the functions colour_hex and colour_rgb for convenience.\n", content: "import gleam/int\nimport gleam/list\nimport gleam_community/colour\nimport paint as p\n\npub fn community_colour_example() -> p.Picture {\n  let assert Ok(semi_transparent) = colour.from_rgba(0.3, 0.3, 0.0, 0.5)\n  let colours = [colour.dark_red, colour.blue, semi_transparent]\n\n  p.combine(\n    list.index_map(colours, fn(c, i) {\n      p.circle(30.0) |> p.fill(c) |> p.translate_x(int.to_float(i) *. 30.0)\n    }),\n  )\n  // center\n  |> p.translate_x(-30.0)\n}"),
  Reference(path: [".", "src", "examples", "combine.gleam"], module_doc: "", content: "import paint as p\n\npub fn combine_example() -> p.Picture {\n  let circle = p.circle(30.0)\n  p.combine([\n    circle,\n    circle |> p.translate_x(30.0),\n    circle |> p.translate_x(-30.0),\n  ])\n}"),
  Reference(path: [".", "src", "examples", "rotate.gleam"], module_doc: " You can use the functions angle_deg and angle_rad to make angles.\n", content: "import paint as p\n\npub fn rotate_example() -> p.Picture {\n  p.square(40.0)\n  |> p.rotate(p.angle_deg(45.0))\n  |> p.concat(p.square(40.0))\n}"),
  Reference(path: [".", "src", "examples", "scale.gleam"], module_doc: " There are three functions that are used to scale a picture.\n scale_uniform, scale_x, and scale_y.\n", content: "import paint as p\n\npub fn scale_example() -> p.Picture {\n  p.circle(30.0)\n  |> p.scale_uniform(0.5)\n  |> p.concat(p.circle(30.0))\n}"),
  Reference(path: [".", "src", "examples", "translate.gleam"], module_doc: " There are three functions that are used to move a picture around.\n translate_xy, translate_x, and translate_y.\n", content: "import paint as p\n\npub fn translate_example() -> p.Picture {\n  p.circle(30.0)\n  |> p.translate_y(25.0)\n  |> p.concat(p.circle(30.0))\n}"),
  Reference(path: [".", "src", "examples", "stroke.gleam"], module_doc: " Note that you may also remove the default stroke\n using stroke_none.\n", content: "import paint as p\n\npub fn stroke_example() -> p.Picture {\n  let blue = p.colour_hex(\"#a6f0fc\")\n\n  p.circle(30.0) |> p.stroke(blue, width: 5.0)\n}"),
  Reference(path: [".", "src", "examples", "fill.gleam"], module_doc: "", content: "import paint as p\n\npub fn fill_example() -> p.Picture {\n  let pink = p.colour_hex(\"#ffaff3\")\n\n  p.circle(30.0)\n  |> p.fill(pink)\n}"),
  Reference(path: [".", "src", "examples", "text.gleam"], module_doc: "", content: "import paint as p\n\npub fn text_example() -> p.Picture {\n  p.text(\"Hi!\", px: 40)\n}"),
  Reference(path: [".", "src", "examples", "square.gleam"], module_doc: "", content: "import paint as p\n\npub fn square_example() -> p.Picture {\n  p.square(40.0)\n}"),
  Reference(path: [".", "src", "examples", "rectangle.gleam"], module_doc: "", content: "import paint as p\n\npub fn rectangle_example() -> p.Picture {\n  p.rectangle(55.0, 40.0)\n}"),
  Reference(path: [".", "src", "examples", "lines.gleam"], module_doc: "", content: "import paint as p\n\npub fn lines_example() -> p.Picture {\n  p.lines([#(-10.0, -20.0), #(50.0, 30.0), #(-20.0, 50.0)])\n}"),
  Reference(path: [".", "src", "examples", "polygon.gleam"], module_doc: "", content: "import paint as p\n\npub fn polygon_example() -> p.Picture {\n  p.polygon([#(-10.0, -20.0), #(50.0, 30.0), #(-20.0, 50.0)])\n}"),
  Reference(path: [".", "src", "examples", "arc.gleam"], module_doc: "", content: "import paint as p\n\npub fn arc_example() -> p.Picture {\n  let radius = 40.0\n  p.arc(radius, p.angle_deg(0.0), p.angle_deg(100.0))\n}"),
  Reference(path: [".", "src", "examples", "circle.gleam"], module_doc: "", content: "import paint as p\n\npub fn circle_example() -> p.Picture {\n  p.circle(30.0)\n}"),
  Reference(path: [".", "src", "examples", "blank.gleam"], module_doc: "", content: "import paint as p\n\npub fn blank_example() -> p.Picture {\n  p.blank()\n}")
]